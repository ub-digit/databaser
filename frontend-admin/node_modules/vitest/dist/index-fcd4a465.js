import require$$0 from 'tty';
import { isPackageExists } from 'local-pkg';

var picocolors = {exports: {}};

let tty = require$$0;

let isColorSupported =
	!("NO_COLOR" in process.env || process.argv.includes("--no-color")) &&
	("FORCE_COLOR" in process.env ||
		process.argv.includes("--color") ||
		process.platform === "win32" ||
		(tty.isatty(1) && process.env.TERM !== "dumb") ||
		"CI" in process.env);

let formatter =
	(open, close, replace = open) =>
	input => {
		let string = "" + input;
		let index = string.indexOf(close, open.length);
		return ~index
			? open + replaceClose(string, close, replace, index) + close
			: open + string + close
	};

let replaceClose = (string, close, replace, index) => {
	let start = string.substring(0, index) + replace;
	let end = string.substring(index + close.length);
	let nextIndex = end.indexOf(close);
	return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end
};

let createColors = (enabled = isColorSupported) => ({
	isColorSupported: enabled,
	reset: enabled ? s => `\x1b[0m${s}\x1b[0m` : String,
	bold: enabled ? formatter("\x1b[1m", "\x1b[22m", "\x1b[22m\x1b[1m") : String,
	dim: enabled ? formatter("\x1b[2m", "\x1b[22m", "\x1b[22m\x1b[2m") : String,
	italic: enabled ? formatter("\x1b[3m", "\x1b[23m") : String,
	underline: enabled ? formatter("\x1b[4m", "\x1b[24m") : String,
	inverse: enabled ? formatter("\x1b[7m", "\x1b[27m") : String,
	hidden: enabled ? formatter("\x1b[8m", "\x1b[28m") : String,
	strikethrough: enabled ? formatter("\x1b[9m", "\x1b[29m") : String,
	black: enabled ? formatter("\x1b[30m", "\x1b[39m") : String,
	red: enabled ? formatter("\x1b[31m", "\x1b[39m") : String,
	green: enabled ? formatter("\x1b[32m", "\x1b[39m") : String,
	yellow: enabled ? formatter("\x1b[33m", "\x1b[39m") : String,
	blue: enabled ? formatter("\x1b[34m", "\x1b[39m") : String,
	magenta: enabled ? formatter("\x1b[35m", "\x1b[39m") : String,
	cyan: enabled ? formatter("\x1b[36m", "\x1b[39m") : String,
	white: enabled ? formatter("\x1b[37m", "\x1b[39m") : String,
	gray: enabled ? formatter("\x1b[90m", "\x1b[39m") : String,
	bgBlack: enabled ? formatter("\x1b[40m", "\x1b[49m") : String,
	bgRed: enabled ? formatter("\x1b[41m", "\x1b[49m") : String,
	bgGreen: enabled ? formatter("\x1b[42m", "\x1b[49m") : String,
	bgYellow: enabled ? formatter("\x1b[43m", "\x1b[49m") : String,
	bgBlue: enabled ? formatter("\x1b[44m", "\x1b[49m") : String,
	bgMagenta: enabled ? formatter("\x1b[45m", "\x1b[49m") : String,
	bgCyan: enabled ? formatter("\x1b[46m", "\x1b[49m") : String,
	bgWhite: enabled ? formatter("\x1b[47m", "\x1b[49m") : String,
});

picocolors.exports = createColors();
picocolors.exports.createColors = createColors;

var c = picocolors.exports;

function notNullish(v) {
  return v != null;
}
function slash(str) {
  return str.replace(/\\/g, "/");
}
function mergeSlashes(str) {
  return str.replace(/\/\//g, "/");
}
const noop = () => {
};
function toArray(array) {
  array = array || [];
  if (Array.isArray(array))
    return array;
  return [array];
}
const toString = (v) => Object.prototype.toString.call(v);
const isPlainObject = (val) => toString(val) === "[object Object]";
function isObject(item) {
  return item != null && typeof item === "object" && !Array.isArray(item);
}
function deepMerge(target, ...sources) {
  if (!sources.length)
    return target;
  const source = sources.shift();
  if (source === void 0)
    return target;
  if (isMergableObject(target) && isMergableObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isMergableObject(source[key])) {
        if (!target[key])
          target[key] = {};
        deepMerge(target[key], source[key]);
      } else if (Array.isArray(source[key])) {
        if (!target[key])
          target[key] = [];
        target[key].push(...source[key]);
      } else {
        target[key] = source[key];
      }
    });
  }
  return deepMerge(target, ...sources);
}
function isMergableObject(item) {
  return isPlainObject(item) && !Array.isArray(item);
}

function getTests(suite) {
  return toArray(suite).flatMap((s) => s.type === "test" ? [s] : s.tasks.flatMap((c) => c.type === "test" ? [c] : getTests(c)));
}
function getSuites(suite) {
  return toArray(suite).flatMap((s) => s.type === "suite" ? [s, ...getSuites(s.tasks)] : []);
}
function hasTests(suite) {
  return toArray(suite).some((s) => s.tasks.some((c) => c.type === "test" || hasTests(c)));
}
function hasFailed(suite) {
  return toArray(suite).some((s) => {
    var _a;
    return ((_a = s.result) == null ? void 0 : _a.state) === "fail" || s.type === "suite" && hasFailed(s.tasks);
  });
}
function hasFailedSnapshot(suite) {
  return getTests(suite).some((s) => {
    var _a, _b;
    const message = (_b = (_a = s.result) == null ? void 0 : _a.error) == null ? void 0 : _b.message;
    return message == null ? void 0 : message.match(/Snapshot .* mismatched/);
  });
}
function getNames(task) {
  const names = [task.name];
  let current = task;
  while ((current == null ? void 0 : current.suite) || (current == null ? void 0 : current.file)) {
    current = current.suite || current.file;
    if (current == null ? void 0 : current.name)
      names.unshift(current.name);
  }
  return names;
}

process.platform === "win32";
function partitionSuiteChildren(suite) {
  let tasksGroup = [];
  const tasksGroups = [];
  for (const c2 of suite.tasks) {
    if (tasksGroup.length === 0 || c2.concurrent === tasksGroup[0].concurrent) {
      tasksGroup.push(c2);
    } else {
      tasksGroups.push(tasksGroup);
      tasksGroup = [c2];
    }
  }
  if (tasksGroup.length > 0)
    tasksGroups.push(tasksGroup);
  return tasksGroups;
}
function getFullName(task) {
  return getNames(task).join(c.dim(" > "));
}
async function ensurePackageInstalled(dependency, promptInstall = !process.env.CI && process.stdout.isTTY) {
  if (isPackageExists(dependency))
    return true;
  process.stderr.write(c.red(`${c.inverse(c.red(" MISSING DEP "))} Can not find dependency '${dependency}'

`));
  if (!promptInstall)
    return false;
  const prompts = await import('./index-fa899e66.js').then(function (n) { return n.i; });
  const { install } = await prompts.prompt({
    type: "confirm",
    name: "install",
    message: c.reset(`Do you want to install ${c.green(dependency)}?`)
  });
  if (install) {
    await (await import('./index-ce49e384.js')).installPackage(dependency, { dev: true });
    process.stderr.write(c.yellow(`
Package ${dependency} installed, re-run the command to start.
`));
    process.exit(1);
    return true;
  }
  return false;
}
function getCallLastIndex(code) {
  let charIndex = -1;
  let inString = null;
  let startedBracers = 0;
  let endedBracers = 0;
  let beforeChar = null;
  while (charIndex <= code.length) {
    beforeChar = code[charIndex];
    charIndex++;
    const char = code[charIndex];
    const isCharString = char === '"' || char === "'" || char === "`";
    if (isCharString && beforeChar !== "\\") {
      if (inString === char)
        inString = null;
      else if (!inString)
        inString = char;
    }
    if (!inString) {
      if (char === "(")
        startedBracers++;
      if (char === ")")
        endedBracers++;
    }
    if (startedBracers && endedBracers && startedBracers === endedBracers)
      return charIndex;
  }
  return null;
}

export { notNullish as a, hasFailedSnapshot as b, c, getSuites as d, ensurePackageInstalled as e, getTests as f, getFullName as g, hasFailed as h, isObject as i, deepMerge as j, getCallLastIndex as k, getNames as l, mergeSlashes as m, noop as n, hasTests as o, partitionSuiteChildren as p, slash as s, toArray as t };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtZmNkNGE0NjUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9waWNvY29sb3JzQDEuMC4wL25vZGVfbW9kdWxlcy9waWNvY29sb3JzL3BpY29jb2xvcnMuanMiLCIuLi9zcmMvdXRpbHMvYmFzZS50cyIsIi4uL3NyYy91dGlscy90YXNrcy50cyIsIi4uL3NyYy91dGlscy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdHR5ID0gcmVxdWlyZShcInR0eVwiKVxuXG5sZXQgaXNDb2xvclN1cHBvcnRlZCA9XG5cdCEoXCJOT19DT0xPUlwiIGluIHByb2Nlc3MuZW52IHx8IHByb2Nlc3MuYXJndi5pbmNsdWRlcyhcIi0tbm8tY29sb3JcIikpICYmXG5cdChcIkZPUkNFX0NPTE9SXCIgaW4gcHJvY2Vzcy5lbnYgfHxcblx0XHRwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoXCItLWNvbG9yXCIpIHx8XG5cdFx0cHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiIHx8XG5cdFx0KHR0eS5pc2F0dHkoMSkgJiYgcHJvY2Vzcy5lbnYuVEVSTSAhPT0gXCJkdW1iXCIpIHx8XG5cdFx0XCJDSVwiIGluIHByb2Nlc3MuZW52KVxuXG5sZXQgZm9ybWF0dGVyID1cblx0KG9wZW4sIGNsb3NlLCByZXBsYWNlID0gb3BlbikgPT5cblx0aW5wdXQgPT4ge1xuXHRcdGxldCBzdHJpbmcgPSBcIlwiICsgaW5wdXRcblx0XHRsZXQgaW5kZXggPSBzdHJpbmcuaW5kZXhPZihjbG9zZSwgb3Blbi5sZW5ndGgpXG5cdFx0cmV0dXJuIH5pbmRleFxuXHRcdFx0PyBvcGVuICsgcmVwbGFjZUNsb3NlKHN0cmluZywgY2xvc2UsIHJlcGxhY2UsIGluZGV4KSArIGNsb3NlXG5cdFx0XHQ6IG9wZW4gKyBzdHJpbmcgKyBjbG9zZVxuXHR9XG5cbmxldCByZXBsYWNlQ2xvc2UgPSAoc3RyaW5nLCBjbG9zZSwgcmVwbGFjZSwgaW5kZXgpID0+IHtcblx0bGV0IHN0YXJ0ID0gc3RyaW5nLnN1YnN0cmluZygwLCBpbmRleCkgKyByZXBsYWNlXG5cdGxldCBlbmQgPSBzdHJpbmcuc3Vic3RyaW5nKGluZGV4ICsgY2xvc2UubGVuZ3RoKVxuXHRsZXQgbmV4dEluZGV4ID0gZW5kLmluZGV4T2YoY2xvc2UpXG5cdHJldHVybiB+bmV4dEluZGV4ID8gc3RhcnQgKyByZXBsYWNlQ2xvc2UoZW5kLCBjbG9zZSwgcmVwbGFjZSwgbmV4dEluZGV4KSA6IHN0YXJ0ICsgZW5kXG59XG5cbmxldCBjcmVhdGVDb2xvcnMgPSAoZW5hYmxlZCA9IGlzQ29sb3JTdXBwb3J0ZWQpID0+ICh7XG5cdGlzQ29sb3JTdXBwb3J0ZWQ6IGVuYWJsZWQsXG5cdHJlc2V0OiBlbmFibGVkID8gcyA9PiBgXFx4MWJbMG0ke3N9XFx4MWJbMG1gIDogU3RyaW5nLFxuXHRib2xkOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbMW1cIiwgXCJcXHgxYlsyMm1cIiwgXCJcXHgxYlsyMm1cXHgxYlsxbVwiKSA6IFN0cmluZyxcblx0ZGltOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbMm1cIiwgXCJcXHgxYlsyMm1cIiwgXCJcXHgxYlsyMm1cXHgxYlsybVwiKSA6IFN0cmluZyxcblx0aXRhbGljOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbM21cIiwgXCJcXHgxYlsyM21cIikgOiBTdHJpbmcsXG5cdHVuZGVybGluZTogZW5hYmxlZCA/IGZvcm1hdHRlcihcIlxceDFiWzRtXCIsIFwiXFx4MWJbMjRtXCIpIDogU3RyaW5nLFxuXHRpbnZlcnNlOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbN21cIiwgXCJcXHgxYlsyN21cIikgOiBTdHJpbmcsXG5cdGhpZGRlbjogZW5hYmxlZCA/IGZvcm1hdHRlcihcIlxceDFiWzhtXCIsIFwiXFx4MWJbMjhtXCIpIDogU3RyaW5nLFxuXHRzdHJpa2V0aHJvdWdoOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbOW1cIiwgXCJcXHgxYlsyOW1cIikgOiBTdHJpbmcsXG5cdGJsYWNrOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbMzBtXCIsIFwiXFx4MWJbMzltXCIpIDogU3RyaW5nLFxuXHRyZWQ6IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYlszMW1cIiwgXCJcXHgxYlszOW1cIikgOiBTdHJpbmcsXG5cdGdyZWVuOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbMzJtXCIsIFwiXFx4MWJbMzltXCIpIDogU3RyaW5nLFxuXHR5ZWxsb3c6IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYlszM21cIiwgXCJcXHgxYlszOW1cIikgOiBTdHJpbmcsXG5cdGJsdWU6IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYlszNG1cIiwgXCJcXHgxYlszOW1cIikgOiBTdHJpbmcsXG5cdG1hZ2VudGE6IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYlszNW1cIiwgXCJcXHgxYlszOW1cIikgOiBTdHJpbmcsXG5cdGN5YW46IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYlszNm1cIiwgXCJcXHgxYlszOW1cIikgOiBTdHJpbmcsXG5cdHdoaXRlOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbMzdtXCIsIFwiXFx4MWJbMzltXCIpIDogU3RyaW5nLFxuXHRncmF5OiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbOTBtXCIsIFwiXFx4MWJbMzltXCIpIDogU3RyaW5nLFxuXHRiZ0JsYWNrOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbNDBtXCIsIFwiXFx4MWJbNDltXCIpIDogU3RyaW5nLFxuXHRiZ1JlZDogZW5hYmxlZCA/IGZvcm1hdHRlcihcIlxceDFiWzQxbVwiLCBcIlxceDFiWzQ5bVwiKSA6IFN0cmluZyxcblx0YmdHcmVlbjogZW5hYmxlZCA/IGZvcm1hdHRlcihcIlxceDFiWzQybVwiLCBcIlxceDFiWzQ5bVwiKSA6IFN0cmluZyxcblx0YmdZZWxsb3c6IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYls0M21cIiwgXCJcXHgxYls0OW1cIikgOiBTdHJpbmcsXG5cdGJnQmx1ZTogZW5hYmxlZCA/IGZvcm1hdHRlcihcIlxceDFiWzQ0bVwiLCBcIlxceDFiWzQ5bVwiKSA6IFN0cmluZyxcblx0YmdNYWdlbnRhOiBlbmFibGVkID8gZm9ybWF0dGVyKFwiXFx4MWJbNDVtXCIsIFwiXFx4MWJbNDltXCIpIDogU3RyaW5nLFxuXHRiZ0N5YW46IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYls0Nm1cIiwgXCJcXHgxYls0OW1cIikgOiBTdHJpbmcsXG5cdGJnV2hpdGU6IGVuYWJsZWQgPyBmb3JtYXR0ZXIoXCJcXHgxYls0N21cIiwgXCJcXHgxYls0OW1cIikgOiBTdHJpbmcsXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUNvbG9ycygpXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGVDb2xvcnMgPSBjcmVhdGVDb2xvcnNcbiIsImltcG9ydCB0eXBlIHsgQXJyYXlhYmxlLCBEZWVwTWVyZ2UsIE51bGxhYmxlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBub3ROdWxsaXNoPFQ+KHY6IFQgfCBudWxsIHwgdW5kZWZpbmVkKTogdiBpcyBOb25OdWxsYWJsZTxUPiB7XG4gIHJldHVybiB2ICE9IG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsYXNoKHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxcXC9nLCAnLycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNsYXNoZXMoc3RyOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXC9cXC8vZywgJy8nKVxufVxuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHsgfVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmU8VD4odmFsOiBUKTogVCB7XG4gIGxldCBrOiBhbnksIG91dDogYW55LCB0bXA6IGFueVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICBvdXQgPSBBcnJheShrID0gdmFsLmxlbmd0aClcbiAgICB3aGlsZSAoay0tKVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXG4gICAgICBvdXRba10gPSAodG1wID0gdmFsW2tdKSAmJiB0eXBlb2YgdG1wID09PSAnb2JqZWN0JyA/IGNsb25lKHRtcCkgOiB0bXBcbiAgICByZXR1cm4gb3V0IGFzIGFueVxuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIG91dCA9IHt9IC8vIG51bGxcbiAgICBmb3IgKGsgaW4gdmFsKSB7XG4gICAgICBpZiAoayA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG91dCwgaywge1xuICAgICAgICAgIHZhbHVlOiBjbG9uZSgodmFsIGFzIGFueSlba10pLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICAgICAgICBvdXRba10gPSAodG1wID0gKHZhbCBhcyBhbnkpW2tdKSAmJiB0eXBlb2YgdG1wID09PSAnb2JqZWN0JyA/IGNsb25lKHRtcCkgOiB0bXBcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuLyoqXG4gKiBDb252ZXJ0IGBBcnJheWFibGU8VD5gIHRvIGBBcnJheTxUPmBcbiAqXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheTxUPihhcnJheT86IE51bGxhYmxlPEFycmF5YWJsZTxUPj4pOiBBcnJheTxUPiB7XG4gIGFycmF5ID0gYXJyYXkgfHwgW11cbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXkpKVxuICAgIHJldHVybiBhcnJheVxuICByZXR1cm4gW2FycmF5XVxufVxuXG5leHBvcnQgY29uc3QgdG9TdHJpbmcgPSAodjogYW55KSA9PiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcbmV4cG9ydCBjb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbDogYW55KTogdmFsIGlzIG9iamVjdCA9PiB0b1N0cmluZyh2YWwpID09PSAnW29iamVjdCBPYmplY3RdJ1xuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaXRlbTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gaXRlbSAhPSBudWxsICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpdGVtKVxufVxuXG4vKipcbiAqIERlZXAgbWVyZ2UgOlBcbiAqXG4gKiBXaWxsIG1lcmdlIG9iamVjdHMgb25seSBpZiB0aGV5IGFyZSBwbGFpblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcE1lcmdlPFQgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3QsIFMgZXh0ZW5kcyBvYmplY3QgPSBUPih0YXJnZXQ6IFQsIC4uLnNvdXJjZXM6IFNbXSk6IERlZXBNZXJnZTxULCBTPiB7XG4gIGlmICghc291cmNlcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRhcmdldCBhcyBhbnlcblxuICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KClcbiAgaWYgKHNvdXJjZSA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiB0YXJnZXQgYXMgYW55XG5cbiAgaWYgKGlzTWVyZ2FibGVPYmplY3QodGFyZ2V0KSAmJiBpc01lcmdhYmxlT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAoT2JqZWN0LmtleXMoc291cmNlKSBhcyAoa2V5b2YgUyAmIGtleW9mIFQpW10pLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGlzTWVyZ2FibGVPYmplY3Qoc291cmNlW2tleV0pKSB7XG4gICAgICAgIGlmICghdGFyZ2V0W2tleV0pXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fSBhcyBhbnlcblxuICAgICAgICBkZWVwTWVyZ2UodGFyZ2V0W2tleV0gYXMgYW55LCBzb3VyY2Vba2V5XSBhcyBhbnkpXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNvdXJjZVtrZXldKSkge1xuICAgICAgICBpZiAoIXRhcmdldFtrZXldKVxuICAgICAgICAgIHRhcmdldFtrZXldID0gW10gYXMgYW55XG5cbiAgICAgICAgKHRhcmdldFtrZXldIGFzIGFueSkucHVzaCguLi5zb3VyY2Vba2V5XSBhcyBhbnkpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XSBhcyBhbnlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGRlZXBNZXJnZSh0YXJnZXQsIC4uLnNvdXJjZXMpXG59XG5cbmZ1bmN0aW9uIGlzTWVyZ2FibGVPYmplY3QoaXRlbTogYW55KTogaXRlbSBpcyBPYmplY3Qge1xuICByZXR1cm4gaXNQbGFpbk9iamVjdChpdGVtKSAmJiAhQXJyYXkuaXNBcnJheShpdGVtKVxufVxuIiwiaW1wb3J0IHR5cGUgeyBBcnJheWFibGUsIFN1aXRlLCBUYXNrLCBUZXN0IH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi9iYXNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVzdHMoc3VpdGU6IEFycmF5YWJsZTxUYXNrPik6IFRlc3RbXSB7XG4gIHJldHVybiB0b0FycmF5KHN1aXRlKS5mbGF0TWFwKHMgPT4gcy50eXBlID09PSAndGVzdCcgPyBbc10gOiBzLnRhc2tzLmZsYXRNYXAoYyA9PiBjLnR5cGUgPT09ICd0ZXN0JyA/IFtjXSA6IGdldFRlc3RzKGMpKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhc2tzKHRhc2tzOiBBcnJheWFibGU8VGFzaz4gPSBbXSk6IFRhc2tbXSB7XG4gIHJldHVybiB0b0FycmF5KHRhc2tzKS5mbGF0TWFwKHMgPT4gcy50eXBlID09PSAndGVzdCcgPyBbc10gOiBbcywgLi4uZ2V0VGFza3Mocy50YXNrcyldKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3VpdGVzKHN1aXRlOiBBcnJheWFibGU8VGFzaz4pOiBTdWl0ZVtdIHtcbiAgcmV0dXJuIHRvQXJyYXkoc3VpdGUpLmZsYXRNYXAocyA9PiBzLnR5cGUgPT09ICdzdWl0ZScgPyBbcywgLi4uZ2V0U3VpdGVzKHMudGFza3MpXSA6IFtdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzVGVzdHMoc3VpdGU6IEFycmF5YWJsZTxTdWl0ZT4pOiBib29sZWFuIHtcbiAgcmV0dXJuIHRvQXJyYXkoc3VpdGUpLnNvbWUocyA9PiBzLnRhc2tzLnNvbWUoYyA9PiBjLnR5cGUgPT09ICd0ZXN0JyB8fCBoYXNUZXN0cyhjIGFzIFN1aXRlKSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNGYWlsZWQoc3VpdGU6IEFycmF5YWJsZTxUYXNrPik6IGJvb2xlYW4ge1xuICByZXR1cm4gdG9BcnJheShzdWl0ZSkuc29tZShzID0+IHMucmVzdWx0Py5zdGF0ZSA9PT0gJ2ZhaWwnIHx8IChzLnR5cGUgPT09ICdzdWl0ZScgJiYgaGFzRmFpbGVkKHMudGFza3MpKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ZhaWxlZFNuYXBzaG90KHN1aXRlOiBBcnJheWFibGU8VGFzaz4pOiBib29sZWFuIHtcbiAgcmV0dXJuIGdldFRlc3RzKHN1aXRlKS5zb21lKChzKSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHMucmVzdWx0Py5lcnJvcj8ubWVzc2FnZVxuICAgIHJldHVybiBtZXNzYWdlPy5tYXRjaCgvU25hcHNob3QgLiogbWlzbWF0Y2hlZC8pXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lcyh0YXNrOiBUYXNrKSB7XG4gIGNvbnN0IG5hbWVzID0gW3Rhc2submFtZV1cbiAgbGV0IGN1cnJlbnQ6IFRhc2sgfCB1bmRlZmluZWQgPSB0YXNrXG5cbiAgd2hpbGUgKGN1cnJlbnQ/LnN1aXRlIHx8IGN1cnJlbnQ/LmZpbGUpIHtcbiAgICBjdXJyZW50ID0gY3VycmVudC5zdWl0ZSB8fCBjdXJyZW50LmZpbGVcbiAgICBpZiAoY3VycmVudD8ubmFtZSlcbiAgICAgIG5hbWVzLnVuc2hpZnQoY3VycmVudC5uYW1lKVxuICB9XG5cbiAgcmV0dXJuIG5hbWVzXG59XG4iLCJpbXBvcnQgYyBmcm9tICdwaWNvY29sb3JzJ1xuaW1wb3J0IHsgaXNQYWNrYWdlRXhpc3RzIH0gZnJvbSAnbG9jYWwtcGtnJ1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGhlJ1xuaW1wb3J0IHR5cGUgeyBTdWl0ZSwgVGFzayB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgZ2V0TmFtZXMgfSBmcm9tICcuL3Rhc2tzJ1xuXG5leHBvcnQgKiBmcm9tICcuL3Rhc2tzJ1xuZXhwb3J0ICogZnJvbSAnLi9wYXRoJ1xuZXhwb3J0ICogZnJvbSAnLi9iYXNlJ1xuXG5leHBvcnQgY29uc3QgaXNXaW5kb3dzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJ1xuXG4vKipcbiAqIFBhcnRpdGlvbiBpbiB0YXNrcyBncm91cHMgYnkgY29uc2VjdXRpdmUgY29uY3VycmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFydGl0aW9uU3VpdGVDaGlsZHJlbihzdWl0ZTogU3VpdGUpIHtcbiAgbGV0IHRhc2tzR3JvdXA6IFRhc2tbXSA9IFtdXG4gIGNvbnN0IHRhc2tzR3JvdXBzOiBUYXNrW11bXSA9IFtdXG4gIGZvciAoY29uc3QgYyBvZiBzdWl0ZS50YXNrcykge1xuICAgIGlmICh0YXNrc0dyb3VwLmxlbmd0aCA9PT0gMCB8fCBjLmNvbmN1cnJlbnQgPT09IHRhc2tzR3JvdXBbMF0uY29uY3VycmVudCkge1xuICAgICAgdGFza3NHcm91cC5wdXNoKGMpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGFza3NHcm91cHMucHVzaCh0YXNrc0dyb3VwKVxuICAgICAgdGFza3NHcm91cCA9IFtjXVxuICAgIH1cbiAgfVxuICBpZiAodGFza3NHcm91cC5sZW5ndGggPiAwKVxuICAgIHRhc2tzR3JvdXBzLnB1c2godGFza3NHcm91cClcblxuICByZXR1cm4gdGFza3NHcm91cHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bGxOYW1lKHRhc2s6IFRhc2spIHtcbiAgcmV0dXJuIGdldE5hbWVzKHRhc2spLmpvaW4oYy5kaW0oJyA+ICcpKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5zdXJlUGFja2FnZUluc3RhbGxlZChcbiAgZGVwZW5kZW5jeTogc3RyaW5nLFxuICBwcm9tcHRJbnN0YWxsID0gIXByb2Nlc3MuZW52LkNJICYmIHByb2Nlc3Muc3Rkb3V0LmlzVFRZLFxuKSB7XG4gIGlmIChpc1BhY2thZ2VFeGlzdHMoZGVwZW5kZW5jeSkpXG4gICAgcmV0dXJuIHRydWVcblxuICBwcm9jZXNzLnN0ZGVyci53cml0ZShjLnJlZChgJHtjLmludmVyc2UoYy5yZWQoJyBNSVNTSU5HIERFUCAnKSl9IENhbiBub3QgZmluZCBkZXBlbmRlbmN5ICcke2RlcGVuZGVuY3l9J1xcblxcbmApKVxuXG4gIGlmICghcHJvbXB0SW5zdGFsbClcbiAgICByZXR1cm4gZmFsc2VcblxuICBjb25zdCBwcm9tcHRzID0gYXdhaXQgaW1wb3J0KCdwcm9tcHRzJylcbiAgY29uc3QgeyBpbnN0YWxsIH0gPSBhd2FpdCBwcm9tcHRzLnByb21wdCh7XG4gICAgdHlwZTogJ2NvbmZpcm0nLFxuICAgIG5hbWU6ICdpbnN0YWxsJyxcbiAgICBtZXNzYWdlOiBjLnJlc2V0KGBEbyB5b3Ugd2FudCB0byBpbnN0YWxsICR7Yy5ncmVlbihkZXBlbmRlbmN5KX0/YCksXG4gIH0pXG5cbiAgaWYgKGluc3RhbGwpIHtcbiAgICBhd2FpdCAoYXdhaXQgaW1wb3J0KCdAYW50ZnUvaW5zdGFsbC1wa2cnKSkuaW5zdGFsbFBhY2thZ2UoZGVwZW5kZW5jeSwgeyBkZXY6IHRydWUgfSlcbiAgICAvLyBUT0RPOiBzb21laG93IGl0IGZhaWxzIHRvIGxvYWQgdGhlIHBhY2thZ2UgYWZ0ZXIgaW5zdGFsbGF0aW9uLCByZW1vdmUgdGhpcyB3aGVuIGl0J3MgZml4ZWRcbiAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShjLnllbGxvdyhgXFxuUGFja2FnZSAke2RlcGVuZGVuY3l9IGluc3RhbGxlZCwgcmUtcnVuIHRoZSBjb21tYW5kIHRvIHN0YXJ0LlxcbmApKVxuICAgIHByb2Nlc3MuZXhpdCgxKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBJZiBjb2RlIHN0YXJ0cyB3aXRoIGEgZnVuY3Rpb24gY2FsbCwgd2lsbCByZXR1cm4gaXRzIGxhc3QgaW5kZXgsIHJlc3BlY3RpbmcgYXJndW1lbnRzLlxuICogVGhpcyB3aWxsIHJldHVybiAyNSAtIGxhc3QgZW5kaW5nIGNoYXJhY3RlciBvZiB0b01hdGNoIFwiKVwiXG4gKiBBbHNvIHdvcmtzIHdpdGggY2FsbGJhY2tzXG4gKiBgYGBcbiAqIHRvTWF0Y2goeyB0ZXN0OiAnMTIzJyB9KTtcbiAqIHRvQmVBbGlhc2VkKCcxMjMnKVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWxsTGFzdEluZGV4KGNvZGU6IHN0cmluZykge1xuICBsZXQgY2hhckluZGV4ID0gLTFcbiAgbGV0IGluU3RyaW5nOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICBsZXQgc3RhcnRlZEJyYWNlcnMgPSAwXG4gIGxldCBlbmRlZEJyYWNlcnMgPSAwXG4gIGxldCBiZWZvcmVDaGFyOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICB3aGlsZSAoY2hhckluZGV4IDw9IGNvZGUubGVuZ3RoKSB7XG4gICAgYmVmb3JlQ2hhciA9IGNvZGVbY2hhckluZGV4XVxuICAgIGNoYXJJbmRleCsrXG4gICAgY29uc3QgY2hhciA9IGNvZGVbY2hhckluZGV4XVxuXG4gICAgY29uc3QgaXNDaGFyU3RyaW5nID0gY2hhciA9PT0gJ1wiJyB8fCBjaGFyID09PSAnXFwnJyB8fCBjaGFyID09PSAnYCdcblxuICAgIGlmIChpc0NoYXJTdHJpbmcgJiYgYmVmb3JlQ2hhciAhPT0gJ1xcXFwnKSB7XG4gICAgICBpZiAoaW5TdHJpbmcgPT09IGNoYXIpXG4gICAgICAgIGluU3RyaW5nID0gbnVsbFxuICAgICAgZWxzZSBpZiAoIWluU3RyaW5nKVxuICAgICAgICBpblN0cmluZyA9IGNoYXJcbiAgICB9XG5cbiAgICBpZiAoIWluU3RyaW5nKSB7XG4gICAgICBpZiAoY2hhciA9PT0gJygnKVxuICAgICAgICBzdGFydGVkQnJhY2VycysrXG4gICAgICBpZiAoY2hhciA9PT0gJyknKVxuICAgICAgICBlbmRlZEJyYWNlcnMrK1xuICAgIH1cblxuICAgIGlmIChzdGFydGVkQnJhY2VycyAmJiBlbmRlZEJyYWNlcnMgJiYgc3RhcnRlZEJyYWNlcnMgPT09IGVuZGVkQnJhY2VycylcbiAgICAgIHJldHVybiBjaGFySW5kZXhcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgeyByZXNvbHZlIGFzIHJlc29sdmVQYXRoIH1cbiJdLCJuYW1lcyI6WyJwaWNvY29sb3JzTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUksR0FBRyxHQUFHLFdBQWM7QUFDeEI7QUFDQSxJQUFJLGdCQUFnQjtBQUNwQixDQUFDLEVBQUUsVUFBVSxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDcEUsRUFBRSxhQUFhLElBQUksT0FBTyxDQUFDLEdBQUc7QUFDOUIsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDbEMsRUFBRSxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU87QUFDOUIsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQztB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QUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFNO0FBQzNELENBQUMsT0FBTyxFQUFFLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLE1BQU07QUFDOUQsQ0FBQyxJQUFJLEVBQUUsT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsTUFBTTtBQUMzRCxDQUFDLEtBQUssRUFBRSxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFNO0FBQzVELENBQUMsSUFBSSxFQUFFLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLE1BQU07QUFDM0QsQ0FBQyxPQUFPLEVBQUUsT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsTUFBTTtBQUM5RCxDQUFDLEtBQUssRUFBRSxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFNO0FBQzVELENBQUMsT0FBTyxFQUFFLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLE1BQU07QUFDOUQsQ0FBQyxRQUFRLEVBQUUsT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsTUFBTTtBQUMvRCxDQUFDLE1BQU0sRUFBRSxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFNO0FBQzdELENBQUMsU0FBUyxFQUFFLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLE1BQU07QUFDaEUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsTUFBTTtBQUM3RCxDQUFDLE9BQU8sRUFBRSxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFNO0FBQzlE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
